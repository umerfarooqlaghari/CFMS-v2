
def signup_view(request):
    if request.method == 'POST':
        form = SignupForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('uname')
            password = form.cleaned_data.get('pass1')
            email = form.cleaned_data.get('email')
            first_name = form.cleaned_data.get('fname')
            last_name = form.cleaned_data.get('lname')
            
            # Create a new user with the form data
            user = User.objects.create_user(username=username, email=email, password=password, first_name=first_name, last_name=last_name)
            
            # Set additional user fields
            user.save()
            
            messages.success(request, 'Account created successfully!')
            return redirect('login')
    else:
        form = SignupForm()
    return render(request, 'project_app/register.html', {'form': form})


@csrf_protect
def login_view(request):
    if request.method == 'POST':
        form = LoginForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            user = authenticate(request, username=username, password=password)
            if user is not None:
                login(request, user)
                return redirect('booking')
            else:
                messages.error(request, 'Invalid username or password.')
    else:
        form = LoginForm()
    return render(request, 'project_app/login.html', {'form': form})

    class SignupForm(forms.Form):
    username = forms.CharField(label='User Name', max_length=100, widget=forms.TextInput(attrs={'class': 'form-control py-4', 'placeholder': 'Enter User Name'}))
    fname = forms.CharField(label='First Name', max_length=100, widget=forms.TextInput(attrs={'class': 'form-control py-4', 'placeholder': 'Enter first name'}), required=False)
    lname = forms.CharField(label='Last Name', max_length=100, widget=forms.TextInput(attrs={'class': 'form-control py-4', 'placeholder': 'Enter last name'}), required=False)
    email = forms.EmailField(label='Email', max_length=100, widget=forms.EmailInput(attrs={'class': 'form-control py-4', 'placeholder': 'Enter email address'}))
    pass1 = forms.CharField(label='Password', max_length=100, widget=forms.PasswordInput(attrs={'class': 'form-control py-4', 'placeholder': 'Enter password'}))
    pass2 = forms.CharField(label='Confirm Password', max_length=100, widget=forms.PasswordInput(attrs={'class': 'form-control py-4', 'placeholder': 'Confirm password'}))

    
class LoginForm(forms.Form):
    username = forms.CharField(label='User Name', max_length=100, widget=forms.TextInput(attrs={'class': 'form-control py-4', 'placeholder': 'Enter User Name'}))
    password = forms.CharField(label='Password', max_length=100, widget=forms.PasswordInput(attrs={'class': 'form-control py-4', 'placeholder': 'Enter password'}))    















def user_login(request):
    if request.method == 'POST':
        form = CustomAuthenticationForm(request=request, data=request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            user = authenticate(request, username=username, password=password)
            

            print(f"Username: {username}, Password: {password}")
            
            if user is not None:
                login(request, user)
                print("Login successful")  # Add a print statement to check if login is successful
                return redirect('booking')  
            else:
                messages.error(request, 'Invalid username or password.')
                print("Authentication failed")  # Add a print statement to check if authentication fails
        else:
            messages.error(request, 'Invalid form submission. Please check the fields and try again.')
    else:
        form = CustomAuthenticationForm()

    return render(request, 'project_app/login.html', {'form': form})

